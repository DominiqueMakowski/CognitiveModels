[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cognitive Models",
    "section": "",
    "text": "Preface",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#why-julia",
    "href": "index.html#why-julia",
    "title": "Cognitive Models",
    "section": "Why Julia?",
    "text": "Why Julia?\nJulia - the new cool kid on the scientific block - is a modern programming language with many benefits when compared with R or Python. Importantly, it is currently the only language in which we can fit all the cognitive models under a Bayesian framework using a unified interface like Turing and SequentialSamplingModels.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#why-bayesian",
    "href": "index.html#why-bayesian",
    "title": "Cognitive Models",
    "section": "Why Bayesian?",
    "text": "Why Bayesian?\nUnfortunately, cognitive models often involve distributions for which Frequentist estimations are not yet implemented, and usually contain a lot of parameters (due to the presence of random effects), which makes traditional algorithms fail to converge. Simply put, the Bayesian approach is the only one currently robust enough to fit these somewhat models.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#the-plan",
    "href": "index.html#the-plan",
    "title": "Cognitive Models",
    "section": "The Plan",
    "text": "The Plan\nAs this is a fast-evolving field (both from the theoretical - with new models being proposed - and the technical side - with improvements to the packages and the algorithms), the book needs to be future-resilient and updatable to keep up with the latest best practices.\n\nDecide on the framework to build the book in a reproducible and collaborative manner (Quarto?)\nSet up the infrastructure to automatically build it using GitHub actions and host it on GitHub pages\nWrite the content of the book\nReferencing\n\nAdd Zenodo DOI and reference (but how to deal with evolving author? Through versioning?)\nPublish a paper to present the book project (JOSE)?",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#looking-for-coauthors",
    "href": "index.html#looking-for-coauthors",
    "title": "Cognitive Models",
    "section": "Looking for Coauthors",
    "text": "Looking for Coauthors\nThis project can only be achieved by a team, and I suspect no single person has currently all the skills and knowledge to cover all the content. We need many people who have strengths in various aspects, such as Julia/Turing, theory, writing, making plots etc. Most importantly, this project can serve as a way for us to learn more about this approach to psychological science.\nIf you are interested in the project, you can let us know by opening an issue or getting in touch.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "1_introduction.html",
    "href": "1_introduction.html",
    "title": "1  Fundamentals of Bayesian Modeling in Julia",
    "section": "",
    "text": "1.1 Very quick intro to Julia and Turing\nGoal is to teach just enough so that the reader understands the code.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Fundamentals of Bayesian Modeling in Julia</span>"
    ]
  },
  {
    "objectID": "1_introduction.html#very-quick-intro-to-julia-and-turing",
    "href": "1_introduction.html#very-quick-intro-to-julia-and-turing",
    "title": "1  Fundamentals of Bayesian Modeling in Julia",
    "section": "",
    "text": "Notable Differences with Python and R\n\n\n\nThese are the most common sources of confusion and errors for newcomers to Julia:\n\n1-indexing: Similarly to R, Julia uses 1-based indexing, which means that the first element of a vector is x[1] (not x[0] as in Python).\nPositional; Keyword arguments: Julia functions makes a clear distinction between positional and keyword arguments, and both are often separated by ;. Positional arguments are typically passed without a name, while keyword arguments must be named (e.g., scatter(0, 0; color=:red)). Some functions might look like somefunction(; arg1=val1, arg2=val2).\nSymbols: Some arguments are prefixed with : (e.g., :red in scatter(0, 0; color=:red)). These symbols are like character strings that are not manipulable (there are more efficient).\nExplicit vectorization: Julia does not vectorize operations by default. You need to use a dot . in front of functions and operators to have it apply element by element. For example, sin.([0, 1, 2]) will apply the sin() function to each element of its vector.\nIn-place operations: Julia has a strong emphasis on performance, and in-place operations are often used to avoid unnecessary memory allocations. When functions modify their input “in-place” (without returns), a band ! is used. For example, assuming x = [0] (1-element vector containing 0), push!(x, 2) will modify x in place (it is equivalent to x = push(x, 2)).\n\n\n\n\n1.1.1 Generate Data from Normal Distribution\n\n\nCode\nusing Turing, Distributions, Random\nusing Makie\n\n# Random sample from a Normal(μ=100, σ=15)\niq = rand(Normal(100, 15), 500)\n\n\n\n\nCode\nfig = Figure()\nax = Axis(fig[1, 1], title=\"Distribution\")\ndensity!(ax, iq)\nfig\n\n\n┌ Warning: Found `resolution` in the theme when creating a `Scene`. The `resolution` keyword for `Scene`s and `Figure`s has been deprecated. Use `Figure(; size = ...` or `Scene(; size = ...)` instead, which better reflects that this is a unitless size and not a pixel resolution. The key could also come from `set_theme!` calls or related theming functions.\n└ @ Makie C:\\Users\\domma\\.julia\\packages\\Makie\\VRavR\\src\\scenes.jl:220\n\n\n\n\n\n\n\n\n\n\n\n1.1.2 Recover Distribution Parameters with Turing\n\n\nCode\n@model function model_gaussian(x)\n    # Priors\n    μ ~ Uniform(0, 200)\n    σ ~ Uniform(0, 30)\n\n    # Check against each datapoint\n    for i in 1:length(x)\n        x[i] ~ Normal(μ, σ)\n    end\nend\n\nmodel = model_gaussian(iq)\nsampling_results = sample(model, NUTS(), 400)\n\n# Summary (95% CI)\nsummarystats(sampling_results)\n\n\n┌ Info: Found initial step size\n└   ϵ = 0.05\nSampling:   0%|█                                        |  ETA: 0:00:32Sampling: 100%|█████████████████████████████████████████| Time: 0:00:01\n\n\n\nSummary Statistics\n  parameters       mean       std      mcse   ess_bulk   ess_tail      rhat    ⋯\n      Symbol    Float64   Float64   Float64    Float64    Float64   Float64    ⋯\n           μ   101.0966    0.6163    0.0285   464.5397   331.0063    1.0010    ⋯\n           σ    14.5905    0.4758    0.0221   504.1965   231.1654    1.0362    ⋯\n                                                                1 column omitted",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Fundamentals of Bayesian Modeling in Julia</span>"
    ]
  },
  {
    "objectID": "1_introduction.html#linear-models",
    "href": "1_introduction.html#linear-models",
    "title": "1  Fundamentals of Bayesian Modeling in Julia",
    "section": "1.2 Linear Models",
    "text": "1.2 Linear Models\nUnderstand what the parameters mean (intercept, slopes, sigma).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Fundamentals of Bayesian Modeling in Julia</span>"
    ]
  },
  {
    "objectID": "1_introduction.html#boostrapping",
    "href": "1_introduction.html#boostrapping",
    "title": "1  Fundamentals of Bayesian Modeling in Julia",
    "section": "1.3 Boostrapping",
    "text": "1.3 Boostrapping\nIntroduce concepts related to pseudo-posterior distribution description",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Fundamentals of Bayesian Modeling in Julia</span>"
    ]
  },
  {
    "objectID": "1_introduction.html#hierarchical-models",
    "href": "1_introduction.html#hierarchical-models",
    "title": "1  Fundamentals of Bayesian Modeling in Julia",
    "section": "1.4 Hierarchical Models",
    "text": "1.4 Hierarchical Models\nSimpson’s paradox, random effects, how to leverage them to model interindividual differences",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Fundamentals of Bayesian Modeling in Julia</span>"
    ]
  },
  {
    "objectID": "1_introduction.html#bayesian-estimation",
    "href": "1_introduction.html#bayesian-estimation",
    "title": "1  Fundamentals of Bayesian Modeling in Julia",
    "section": "1.5 Bayesian estimation",
    "text": "1.5 Bayesian estimation\nintroduce Bayesian estimation and priors over parameters",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Fundamentals of Bayesian Modeling in Julia</span>"
    ]
  },
  {
    "objectID": "1_introduction.html#bayesian-mixed-linear-regression",
    "href": "1_introduction.html#bayesian-mixed-linear-regression",
    "title": "1  Fundamentals of Bayesian Modeling in Julia",
    "section": "1.6 Bayesian mixed linear regression",
    "text": "1.6 Bayesian mixed linear regression\nput everything together",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Fundamentals of Bayesian Modeling in Julia</span>"
    ]
  },
  {
    "objectID": "2_predictors.html",
    "href": "2_predictors.html",
    "title": "2  Predictors",
    "section": "",
    "text": "2.1 Categorical predictors (Condition, Group, …)\nIn the previous chapter, we have mainly focused on the relationship between a response variable and a single continuous predictor.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Predictors</span>"
    ]
  },
  {
    "objectID": "2_predictors.html#categorical-predictors-condition-group",
    "href": "2_predictors.html#categorical-predictors-condition-group",
    "title": "2  Predictors",
    "section": "",
    "text": "Contrasts, …",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Predictors</span>"
    ]
  },
  {
    "objectID": "2_predictors.html#interactions",
    "href": "2_predictors.html#interactions",
    "title": "2  Predictors",
    "section": "2.2 Interactions",
    "text": "2.2 Interactions\nTodo.\n\nNested interactions",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Predictors</span>"
    ]
  },
  {
    "objectID": "2_predictors.html#ordered-predictors-likert-scales",
    "href": "2_predictors.html#ordered-predictors-likert-scales",
    "title": "2  Predictors",
    "section": "2.3 Ordered predictors (Likert Scales)",
    "text": "2.3 Ordered predictors (Likert Scales)\nLikert scales, i.e., ordered multiple discrete choices are often used in surveys and questionnaires. While such data is often treated as a continuous variable, such assumption is not necessarily valid. Indeed, distance between the choices is not necessarily equal. For example, the difference between “strongly agree” and “agree” might not be the same as between “agree” and “neutral”. Even when using integers like 1, 2, 3, 4; people might implicitly process “4” as more extreme relative to “3” as “3” to “2”.\n\n\nThe probabilities assigned to discrete probability descriptors are not necessarily equidistant (https://github.com/zonination/perceptions)\n\nWhat can we do to better reflect the cognitive process underlying a Likert scale responses? Monotonic effects.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Predictors</span>"
    ]
  },
  {
    "objectID": "2_predictors.html#non-linear-relationships-polynomial-gams",
    "href": "2_predictors.html#non-linear-relationships-polynomial-gams",
    "title": "2  Predictors",
    "section": "2.4 Non-linear relationships (polynomial, GAMs)",
    "text": "2.4 Non-linear relationships (polynomial, GAMs)\nTodo.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Predictors</span>"
    ]
  },
  {
    "objectID": "3_scales.html",
    "href": "3_scales.html",
    "title": "3  Choice and Scales",
    "section": "",
    "text": "Beta models\nOrdBeta models for slider scales\nLogistic models for binary data\n\nUse the speed accuracy data that we use in the next chapter.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Choice and Scales</span>"
    ]
  },
  {
    "objectID": "4a_rt_descriptive.html",
    "href": "4a_rt_descriptive.html",
    "title": "4  Descriptive Models",
    "section": "",
    "text": "4.1 The Data\nFor this chapter, we will be using the data from Wagenmakers et al. (2008) - Experiment 1 (also reanalyzed by Heathcote and Love 2012), that contains responses and response times for several participants in two conditions (where instructions emphasized either speed or accuracy). Using the same procedure as the authors, we excluded all trials with uninterpretable response time, i.e., responses that are too fast (&lt;180 ms) or too slow (&gt;2 sec instead of &gt;3 sec, see Thériault et al. 2024 for a discussion on outlier removal).\nusing Downloads, CSV, DataFrames, Random\nusing Turing, Distributions, SequentialSamplingModels\nusing GLMakie\n\nRandom.seed!(123)  # For reproducibility\n\ndf = CSV.read(Downloads.download(\"https://raw.githubusercontent.com/DominiqueMakowski/CognitiveModels/main/data/wagenmakers2008.csv\"), DataFrame)\n\n# Show 10 first rows\nfirst(df, 10)\n\n10×5 DataFrame\n\n\n\nRow\nParticipant\nCondition\nRT\nError\nFrequency\n\n\n\nInt64\nString15\nFloat64\nBool\nString15\n\n\n\n\n1\n1\nSpeed\n0.7\nfalse\nLow\n\n\n2\n1\nSpeed\n0.392\ntrue\nVery Low\n\n\n3\n1\nSpeed\n0.46\nfalse\nVery Low\n\n\n4\n1\nSpeed\n0.455\nfalse\nVery Low\n\n\n5\n1\nSpeed\n0.505\ntrue\nLow\n\n\n6\n1\nSpeed\n0.773\nfalse\nHigh\n\n\n7\n1\nSpeed\n0.39\nfalse\nHigh\n\n\n8\n1\nSpeed\n0.587\ntrue\nLow\n\n\n9\n1\nSpeed\n0.603\nfalse\nLow\n\n\n10\n1\nSpeed\n0.435\nfalse\nHigh\nIn the previous chapter, we modelled the error rate (the probability of making an error) using a logistic model, and observed that it was higher in the \"Speed\" condition. But how about speed? We are going to first take interest in the RT of Correct answers only (as we can assume that errors are underpinned by a different generative process).\nAfter filtering out the errors, we create a new column, Accuracy, which is the “binarization” of the Condition column, and is equal to 1 when the condition is \"Accuracy\" and 0 when it is \"Speed\".\nCode\ndf = df[df.Error .== 0, :]\ndf.Accuracy = df.Condition .== \"Accuracy\"\nCode\nfunction plot_distribution(df, title=\"Empirical Distribution of Data from Wagenmakers et al. (2018)\")\n    fig = Figure()\n    ax = Axis(fig[1, 1], title=title,\n        xlabel=\"RT (s)\",\n        ylabel=\"Distribution\",\n        yticksvisible=false,\n        xticksvisible=false,\n        yticklabelsvisible=false)\n    Makie.density!(df[df.Condition .== \"Speed\", :RT], color=(\"#EF5350\", 0.7), label = \"Speed\")\n    Makie.density!(df[df.Condition .== \"Accuracy\", :RT], color=(\"#66BB6A\", 0.7), label = \"Accuracy\")\n    Makie.axislegend(\"Condition\"; position=:rt)\n    Makie.ylims!(ax, (0, nothing))\n    return fig\nend\n\nplot_distribution(df, \"Empirical Distribution of Data from Wagenmakers et al. (2018)\")\n\n\n┌ Warning: Found `resolution` in the theme when creating a `Scene`. The `resolution` keyword for `Scene`s and `Figure`s has been deprecated. Use `Figure(; size = ...` or `Scene(; size = ...)` instead, which better reflects that this is a unitless size and not a pixel resolution. The key could also come from `set_theme!` calls or related theming functions.\n└ @ Makie C:\\Users\\domma\\.julia\\packages\\Makie\\VRavR\\src\\scenes.jl:220",
    "crumbs": [
      "Reaction Times",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Descriptive Models</span>"
    ]
  },
  {
    "objectID": "4a_rt_descriptive.html#the-data",
    "href": "4a_rt_descriptive.html#the-data",
    "title": "4  Descriptive Models",
    "section": "",
    "text": "Code Tip\n\n\n\nNote the usage of vectorization .== as we want to compare each element of the Condition vector to the target \"Accuracy\".",
    "crumbs": [
      "Reaction Times",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Descriptive Models</span>"
    ]
  },
  {
    "objectID": "4a_rt_descriptive.html#gaussian-aka-linear-model",
    "href": "4a_rt_descriptive.html#gaussian-aka-linear-model",
    "title": "4  Descriptive Models",
    "section": "4.2 Gaussian (aka Linear) Model",
    "text": "4.2 Gaussian (aka Linear) Model\n\n\n\n\n\n\nNote\n\n\n\nNote that until the last section of this chapter, we will disregard the existence of multiple participants (which require the inclusion of random effects in the model). We will treat the data as if it was a single participant at first to better understand the parameters, but will show how to add random effects at the end.\n\n\nA linear model is the most common type of model. It aims at predicting the mean \\(\\mu\\) of the outcome variable using a Normal (aka Gaussian) distribution for the residuals. In other words, it models the outcome \\(y\\) as a Normal distribution with a mean \\(\\mu\\) that is itself the result of a linear function of the predictors \\(X\\) and a variance \\(\\sigma\\) that is constant across all values of the predictors. It can be written as \\(y = Normal(\\mu, \\sigma)\\), where \\(\\mu = intercept + slope * X\\).\nIn order to fit a Linear Model for RTs, we need to set a prior on all these parameters, namely: - The variance \\(\\sigma\\) (correspondong to the “spread” of RTs) - The mean \\(\\mu\\) for the intercept (i.e., at the reference condition which is in our case \"Speed\") - The effect of the condition (the slope).\n\n4.2.1 Model Specification\n\n@model function model_Gaussian(rt; condition=nothing)\n\n    # Set priors on variance, intercept and effect of condition\n    σ ~ truncated(Normal(0, 0.5); lower=0)\n\n    μ_intercept ~ truncated(Normal(0, 1); lower=0)\n    μ_condition ~ Normal(0, 0.3)\n\n    for i in 1:length(rt)\n        μ = μ_intercept + μ_condition * condition[i]\n        rt[i] ~ Normal(μ, σ)\n    end\nend\n\n\nfit_Gaussian = model_Gaussian(df.RT; condition=df.Accuracy)\nchain_Gaussian = sample(fit_Gaussian, NUTS(), 400)\n\n\n# Summary (95% CI)\nhpd(chain_Gaussian; alpha=0.05)\n\n\nHPD\n   parameters     lower     upper \n       Symbol   Float64   Float64 \n            σ    0.1652    0.1701\n  μ_intercept    0.5071    0.5168\n  μ_condition    0.1319    0.1457\n\n\n\n\nThe effect of Condition is significant, people are on average slower (higher RT) when condition is \"Accuracy\". But is our model good?\n\n\n4.2.2 Posterior Predictive Check\n\n\nCode\npred = predict(model_Gaussian([(missing) for i in 1:length(df.RT)], condition=df.Accuracy), chain_Gaussian)\npred = Array(pred)\n\n\n\n\nCode\nfig = plot_distribution(df, \"Predictions made by Gaussian (aka Linear) Model\")\nfor i in 1:length(chain_Gaussian)\n    lines!(Makie.KernelDensity.kde(pred[:, i]), color=ifelse(df.Accuracy[i] == 1, \"#388E3C\", \"#D32F2F\"), alpha=0.1)\nend\nfig\n\n\n┌ Warning: Found `resolution` in the theme when creating a `Scene`. The `resolution` keyword for `Scene`s and `Figure`s has been deprecated. Use `Figure(; size = ...` or `Scene(; size = ...)` instead, which better reflects that this is a unitless size and not a pixel resolution. The key could also come from `set_theme!` calls or related theming functions.\n└ @ Makie C:\\Users\\domma\\.julia\\packages\\Makie\\VRavR\\src\\scenes.jl:220",
    "crumbs": [
      "Reaction Times",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Descriptive Models</span>"
    ]
  },
  {
    "objectID": "4a_rt_descriptive.html#scaled-gaussian-model",
    "href": "4a_rt_descriptive.html#scaled-gaussian-model",
    "title": "4  Descriptive Models",
    "section": "4.3 Scaled Gaussian Model",
    "text": "4.3 Scaled Gaussian Model\nThe previous model, despite its poor fit to the data, suggests that the mean RT is higher for the Accuracy condition. But it seems like the distribution is also wider (response time is more variable). Typical linear model estimate only one value for sigma \\(\\sigma\\) for the whole model, hence the requirement for homoscedasticity.\n\n\n\n\n\n\nNote\n\n\n\nHomoscedasticity, or homogeneity of variances, is the assumption of similar variances accross different values of predictors. It is important in linear models as only one value for sigma \\(\\sigma\\) is estimated.\n\n\nIs it possible to set sigma \\(\\sigma\\) as a parameter that would depend on the condition, in the same way as mu \\(\\mu\\)? In Julia, this is very simple.\nAll we need is to set sigma \\(\\sigma\\) as the result of a linear function, such as \\(\\sigma = intercept + slope * condition\\). This means setting a prior on the intercept of sigma \\(\\sigma\\) (in our case, the variance in the reference condition) and a prior on how much this variance changes for the other condition. This change can, by definition, be positive or negative (i.e., the other condition can have either a biggger or a smaller variance), so the prior over the effect of condition should ideally allow for positive and negative values (e.g., σ_condition ~ Normal(0, 0.1)).\nBut this leads to an important problem.\n\n\n\n\n\n\nImportant\n\n\n\nThe combination of an intercept and a (possible negative) slope for sigma \\(\\sigma\\) technically allows for negative variance values, which is impossible (distributions cannot have a negative variance). This issue is one of the most important to address when setting up complex models for RTs.\n\n\nIndeed, even if we set a very narrow prior on the intercept of sigma \\(\\sigma\\) to fix it at for instance 0.14, and a narrow prior on the effect of condition, say \\(Normal(0, 0.001)\\), an effect of condition of -0.15 is still possible (albeit with very low probability). And such effect would lead to a sigma \\(\\sigma\\) of 0.14 - 0.15 = -0.01, which would lead to an error (and this will often happen as the sampling process does explore unlikely regions of the parameter space).\n\n4.3.1 Solution 1: Directional Effect of Condition\nOne possible (but not recommended) solution is to simply make it impossible for the effect of condition to be negative by Truncating the prior to a lower bound of 0. This can work in our case, because we know that the comparison condition is likely to have a higher variance than the reference condition (the intercept) - and if it wasn’t the case, we could have changed the reference factor. However, this is not a good practice as we are enforcing a very strong a priori specific direction of the effect, which is not always justified.\n\n@model function model_ScaledlGaussian(rt; condition=nothing)\n\n    # Priors\n    μ_intercept ~ truncated(Normal(0, 1); lower=0)\n    μ_condition ~ Normal(0, 0.3)\n\n    σ_intercept ~ truncated(Normal(0, 0.5); lower=0)  # Same prior as previously\n    σ_condition ~ truncated(Normal(0, 0.1); lower=0)  # Enforce positivity\n\n    for i in 1:length(rt)\n        μ = μ_intercept + μ_condition * condition[i]\n        σ = σ_intercept + σ_condition * condition[i]\n        rt[i] ~ Normal(μ, σ)\n    end\nend\n\nfit_ScaledlGaussian = model_ScaledlGaussian(df.RT; condition=df.Accuracy)\nchain_ScaledGaussian = sample(fit_ScaledlGaussian, NUTS(), 400)\n\n\n# Summary (95% CI)\nhpd(chain_ScaledGaussian; alpha=0.05)\n\n\nHPD\n   parameters     lower     upper \n       Symbol   Float64   Float64 \n  μ_intercept    0.5081    0.5148\n  μ_condition    0.1330    0.1446\n  σ_intercept    0.1219    0.1271\n  σ_condition    0.0714    0.0810\n\n\n\n\nWe can see that the effect of condition on sigma \\(\\sigma\\) is significantly positive: the variance is higher in the Accuracy condition as compared to the Speed condition.\n\n\n4.3.2 Solution 2: Avoid Exploring Negative Variance Values\nThe other trick is to force the sampling algorithm to avoid exploring negative variance values (when sigma \\(\\sigma\\) &lt; 0). This can be done by adding a conditional statement when sigma \\(\\sigma\\) is negative to avoid trying this value and erroring, and instead returning an infinitely low model probability (-Inf) to push away the exploration of this impossible region.\n\n@model function model_ScaledlGaussian(rt; condition=nothing)\n\n    # Priors\n    μ_intercept ~ truncated(Normal(0, 1); lower=0)\n    μ_condition ~ Normal(0, 0.3)\n\n    σ_intercept ~ truncated(Normal(0, 0.5); lower=0)\n    σ_condition ~ Normal(0, 0.1)\n\n    for i in 1:length(rt)\n        μ = μ_intercept + μ_condition * condition[i]\n        σ = σ_intercept + σ_condition * condition[i]\n        if σ &lt; 0  # Avoid negative variance values\n            Turing.@addlogprob! -Inf\n            return nothing\n        end\n        rt[i] ~ Normal(μ, σ)\n    end\nend\n\nfit_ScaledlGaussian = model_ScaledlGaussian(df.RT; condition=df.Accuracy)\nchain_ScaledGaussian = sample(fit_ScaledlGaussian, NUTS(), 400)\n\n\nhpd(chain_ScaledGaussian; alpha=0.05)\n\n\nHPD\n   parameters     lower     upper \n       Symbol   Float64   Float64 \n  μ_intercept    0.5076    0.5148\n  μ_condition    0.1316    0.1444\n  σ_intercept    0.1223    0.1273\n  σ_condition    0.0709    0.0803\n\n\n\n\n\n\nCode\npred = predict(model_ScaledlGaussian([(missing) for i in 1:length(df.RT)], condition=df.Accuracy), chain_ScaledGaussian)\npred = Array(pred)\n\nfig = plot_distribution(df, \"Predictions made by Scaled Gaussian Model\")\nfor i in 1:length(chain_ScaledGaussian)\n    lines!(Makie.KernelDensity.kde(pred[:, i]), color=ifelse(df.Accuracy[i] == 1, \"#388E3C\", \"#D32F2F\"), alpha=0.1)\nend\nfig\n\n\n┌ Warning: Found `resolution` in the theme when creating a `Scene`. The `resolution` keyword for `Scene`s and `Figure`s has been deprecated. Use `Figure(; size = ...` or `Scene(; size = ...)` instead, which better reflects that this is a unitless size and not a pixel resolution. The key could also come from `set_theme!` calls or related theming functions.\n└ @ Makie C:\\Users\\domma\\.julia\\packages\\Makie\\VRavR\\src\\scenes.jl:220\n\n\n\n\n\n\nAlthough relaxing the homoscedasticity assumption is a good step forward, allowing us to make richer conclusions and better capturing the data. Despite that, the Gaussian model stil seem to be a poor fit to the data.",
    "crumbs": [
      "Reaction Times",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Descriptive Models</span>"
    ]
  },
  {
    "objectID": "4a_rt_descriptive.html#the-problem-with-linear-models",
    "href": "4a_rt_descriptive.html#the-problem-with-linear-models",
    "title": "4  Descriptive Models",
    "section": "4.4 The Problem with Linear Models",
    "text": "4.4 The Problem with Linear Models\nReaction time (RTs) have been traditionally modeled using traditional linear models and their derived statistical tests such as t-test and ANOVAs. Importantly, linear models - by definition - will try to predict the mean of the outcome variable by estimating the “best fitting” Normal distribution. In the context of reaction times (RTs), this is not ideal, as RTs typically exhibit a non-normal distribution, skewed towards the left with a long tail towards the right. This means that the parameters of a Normal distribution (mean \\(\\mu\\) and standard deviation \\(\\sigma\\)) are not good descriptors of the data.\n\n\nLinear models try to find the best fitting Normal distribution for the data. However, for reaction times, even the best fitting Normal distribution (in red) does not capture well the actual data (in grey).\n\nA popular mitigation method to account for the non-normality of RTs is to transform the data, using for instance the popular log-transform. However, this practice should be avoided as it leads to various issues, including loss of power and distorted results interpretation (Lo and Andrews 2015; Schramm and Rouder 2019). Instead, rather than applying arbitrary data transformation, it would be better to swap the Normal distribution used by the model for a more appropriate one that can better capture the characteristics of a RT distribution.",
    "crumbs": [
      "Reaction Times",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Descriptive Models</span>"
    ]
  },
  {
    "objectID": "4a_rt_descriptive.html#shifted-lognormal-model",
    "href": "4a_rt_descriptive.html#shifted-lognormal-model",
    "title": "4  Descriptive Models",
    "section": "4.5 Shifted LogNormal Model",
    "text": "4.5 Shifted LogNormal Model\nOne of the obvious candidate alternative to the log-transformation would be to use a model with a Log-transformed Normal distribution. A LogNormal distribution is a distribution of a random variable whose logarithm is normally distributed. A Shifted LogNormal model introduces a shift (a delay) parameter tau \\(\\tau\\) that corresponds to the minimum “starting time” of the response process.\nWe need to set a prior for this parameter, which is usually truncated between 0 (to exclude negative minimum times) and the minimum RT of the data (the logic being that the minimum delay for response must be lower than the faster response actually observed).\nWhile \\(Uniform(0, min(RT))\\) is a common choice of prior, it is not ideal as it implies that all values between 0 and the minimum RT are equally likely, which is not the case. Indeed, psychology research has shown that such minimum response time for Humans is often betwen 100 and 250 ms. Moreover, in our case, we explicitly removed all RTs below 180 ms, suggesting that the minimum response time is more likely to approach 180 ms than 0 ms.\n\n4.5.1 Prior on Minimum RT\nInstead of a \\(Uniform\\) prior, we will use a \\(Gamma(1.1, 11)\\) distribution (truncated at min. RT), as this particular parameterization reflects the low probability of very low minimum RTs (near 0) and a steadily increasing probability for increasing times.\n\n\nCode\nxaxis = range(0, 0.3, 1000)\nfig = lines(xaxis, pdf.(Gamma(1.1, 11), xaxis); color=:blue, label=\"Gamma(1.1, 11)\")\nvlines!([minimum(df.RT)]; color=\"red\", linestyle=:dash, label=\"Min. RT = 0.18 s\")\naxislegend()\nfig\n\n\n┌ Warning: Found `resolution` in the theme when creating a `Scene`. The `resolution` keyword for `Scene`s and `Figure`s has been deprecated. Use `Figure(; size = ...` or `Scene(; size = ...)` instead, which better reflects that this is a unitless size and not a pixel resolution. The key could also come from `set_theme!` calls or related theming functions.\n└ @ Makie C:\\Users\\domma\\.julia\\packages\\Makie\\VRavR\\src\\scenes.jl:220\n\n\n\n\n\n\n\n4.5.2 Model Specification\n\n@model function model_LogNormal(rt; min_rt=minimum(df.RT), condition=nothing)\n\n    # Priors \n    τ ~ truncated(Gamma(1.1, 11); upper=min_rt)\n\n    μ_intercept ~ Normal(0, exp(1))  # On the log-scale: exp(μ) to get value in seconds\n    μ_condition ~ Normal(0, exp(0.3))\n\n    σ_intercept ~ truncated(Normal(0, 0.5); lower=0)\n    σ_condition ~ Normal(0, 0.1)\n\n    for i in 1:length(rt)\n        μ = μ_intercept + μ_condition * condition[i]\n        σ = σ_intercept + σ_condition * condition[i]\n        if σ &lt; 0  # Avoid negative variance values\n            Turing.@addlogprob! -Inf\n            return nothing\n        end\n        rt[i] ~ ShiftedLogNormal(μ, σ, τ)\n    end\nend\n\nfit_LogNormal = model_LogNormal(df.RT; condition=df.Accuracy)\nchain_LogNormal = sample(fit_LogNormal, NUTS(), 400)\n\n\n\n4.5.3 Interpretation\n\nhpd(chain_LogNormal; alpha=0.05)\n\n\nHPD\n   parameters     lower     upper \n       Symbol   Float64   Float64 \n            τ    0.1718    0.1792\n  μ_intercept   -1.1590   -1.1327\n  μ_condition    0.3157    0.3430\n  σ_intercept    0.3082    0.3228\n  σ_condition    0.0327    0.0508\n\n\n\n\n\n\nCode\npred = predict(model_LogNormal([(missing) for i in 1:length(df.RT)]; condition=df.Accuracy), chain_LogNormal)\npred = Array(pred)\n\nfig = plot_distribution(df, \"Predictions made by Shifted LogNormal Model\")\nfor i in 1:length(chain_LogNormal)\n    lines!(Makie.KernelDensity.kde(pred[:, i]), color=ifelse(df.Accuracy[i] == 1, \"#388E3C\", \"#D32F2F\"), alpha=0.1)\nend\nfig\n\n\n┌ Warning: Found `resolution` in the theme when creating a `Scene`. The `resolution` keyword for `Scene`s and `Figure`s has been deprecated. Use `Figure(; size = ...` or `Scene(; size = ...)` instead, which better reflects that this is a unitless size and not a pixel resolution. The key could also come from `set_theme!` calls or related theming functions.\n└ @ Makie C:\\Users\\domma\\.julia\\packages\\Makie\\VRavR\\src\\scenes.jl:220\n\n\n\n\n\nThis model provides a much better fit to the data, and confirms that the Accuracy condition is associated with higher RTs and higher variability (i.e., a larger distribution width).",
    "crumbs": [
      "Reaction Times",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Descriptive Models</span>"
    ]
  },
  {
    "objectID": "4a_rt_descriptive.html#exgaussian-model",
    "href": "4a_rt_descriptive.html#exgaussian-model",
    "title": "4  Descriptive Models",
    "section": "4.6 ExGaussian Model",
    "text": "4.6 ExGaussian Model\nAnother popular model to describe RTs uses the ExGaussian distribution, i.e., the Exponentially-modified Gaussian distribution (Balota and Yap 2011; Matzke and Wagenmakers 2009).\nThis distribution is a convolution of normal and exponential distributions and has three parameters, namely mu \\(\\mu\\) and sigma \\(\\sigma\\) - the mean and standard deviation of the Gaussian distribution - and tau \\(\\tau\\) - the exponential component of the distribution (note that although denoted by the same letter, it does not correspond directly to a shift of the distribution). Intuitively, these parameters reflect the centrality, the width and the tail dominance, respectively.\n\nBeyond the descriptive value of these types of models, some have tried to interpret their parameters in terms of cognitive mechanisms, arguing for instance that changes in the Gaussian components (\\(\\mu\\) and \\(\\sigma\\)) reflect changes in attentional processes [e.g., “the time required for organization and execution of the motor response”; Hohle (1965)], whereas changes in the exponential component (\\(\\tau\\)) reflect changes in intentional (i.e., decision-related) processes (Kieffaber et al. 2006). However, Matzke and Wagenmakers (2009) demonstrate that there is likely no direct correspondence between ex-Gaussian parameters and cognitive mechanisms, and underline their value primarily as descriptive tools, rather than models of cognition per se.\nDescriptively, the three parameters can be interpreted as:\n\nMu \\(\\mu\\): The location / centrality of the RTs. Would correspond to the mean in a symmetrical distribution.\nSigma \\(\\sigma\\): The variability and dispersion of the RTs. Akin to the standard deviation in normal distributions.\nTau \\(\\tau\\): Tail weight / skewness of the distribution.\n\n\n\n\n\n\n\nImportant\n\n\n\nNote that these parameters are not independent with respect to distribution characteristics, such as the empirical mean and SD. Below is an example of different distributions with the same location (mu \\(\\mu\\)) and dispersion (sigma \\(\\sigma\\)) parameters. Although only the tail weight parameter (tau \\(\\tau\\)) is changed, the whole distribution appears to shift is centre of mass. Hence, one should be careful note to interpret the values of mu \\(\\mu\\) directly as the “mean” or the distribution peak and sigma \\(\\sigma\\) as the SD or the “width”.\n\n\n\n\n4.6.1 Conditional Tau \\(\\tau\\) Parameter\nIn the same way as we modeled the effect of the condition on the variance component sigma \\(\\sigma\\), we can do the same for any other parameters, including the exponential component tau \\(\\tau\\). All wee need is to set a prior on the intercept and the condition effect, and make sure that \\(\\tau &gt; 0\\).\n\n@model function model_ExGaussian(rt; condition=nothing)\n\n    # Priors \n    μ_intercept ~ Normal(0, 1) \n    μ_condition ~ Normal(0, 0.3)\n\n    σ_intercept ~ truncated(Normal(0, 0.5); lower=0)\n    σ_condition ~ Normal(0, 0.1)\n\n    τ_intercept ~ truncated(Normal(0, 0.5); lower=0)\n    τ_condition ~ Normal(0, 0.1)\n\n    for i in 1:length(rt)\n        μ = μ_intercept + μ_condition * condition[i]\n        σ = σ_intercept + σ_condition * condition[i]\n        if σ &lt; 0  # Avoid negative variance values\n            Turing.@addlogprob! -Inf\n            return nothing\n        end\n        τ = τ_intercept + τ_condition * condition[i]\n        if τ &lt;= 0  # Avoid negative tau values\n            Turing.@addlogprob! -Inf\n            return nothing\n        end\n        rt[i] ~ ExGaussian(μ, σ, τ)\n    end\nend\n\nfit_ExGaussian = model_ExGaussian(df.RT; condition=df.Accuracy)\nchain_ExGaussian = sample(fit_ExGaussian, NUTS(), 400)\n\n\n\n4.6.2 Interpretation\n\nhpd(chain_ExGaussian; alpha=0.05)\n\n\nHPD\n   parameters     lower     upper \n       Symbol   Float64   Float64 \n  μ_intercept    0.3999    0.4062\n  μ_condition    0.0618    0.0721\n  σ_intercept    0.0381    0.0432\n  σ_condition    0.0104    0.0185\n  τ_intercept    0.1052    0.1130\n  τ_condition    0.0641    0.0795\n\n\n\n\n\n\nCode\npred = predict(model_ExGaussian([(missing) for i in 1:length(df.RT)]; condition=df.Accuracy), chain_ExGaussian)\npred = Array(pred)\n\nfig = plot_distribution(df, \"Predictions made by Shifted LogNormal Model\")\nfor i in 1:length(chain_ExGaussian)\n    lines!(Makie.KernelDensity.kde(pred[:, i]), color=ifelse(df.Accuracy[i] == 1, \"#388E3C\", \"#D32F2F\"), alpha=0.1)\nend\nfig\n\n\n┌ Warning: Found `resolution` in the theme when creating a `Scene`. The `resolution` keyword for `Scene`s and `Figure`s has been deprecated. Use `Figure(; size = ...` or `Scene(; size = ...)` instead, which better reflects that this is a unitless size and not a pixel resolution. The key could also come from `set_theme!` calls or related theming functions.\n└ @ Makie C:\\Users\\domma\\.julia\\packages\\Makie\\VRavR\\src\\scenes.jl:220\n\n\n\n\n\nThe ExGaussian model also provides an excellent fit to the data. Moreover, by modeling more parameters (including tau \\(\\tau\\)), we can draw more nuanced conclusions. In this case, the Accuracy condition is associated with higher RTs, higher variability, and a heavier tail (i.e., more extreme values).",
    "crumbs": [
      "Reaction Times",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Descriptive Models</span>"
    ]
  },
  {
    "objectID": "4a_rt_descriptive.html#shifted-wald-model",
    "href": "4a_rt_descriptive.html#shifted-wald-model",
    "title": "4  Descriptive Models",
    "section": "4.7 Shifted Wald Model",
    "text": "4.7 Shifted Wald Model\nThe Wald distribution, also known as the Inverse Gaussian distribution, corresponds to the distribution of the first passage time of a Wiener process with a drift rate \\(\\mu\\) and a diffusion rate \\(\\sigma\\). While we will unpack this definition below and emphasize its important consequences, one can first note that it has been described as a potential model for RTs when convoluted with an exponential distribution (in the same way that the ExGaussian distribution is a convolution of a Gaussian and an exponential distribution). However, this Ex-Wald model (Schwarz 2001) was shown to be less appropriate than one of its variant, the Shifted Wald distribution (Heathcote 2004; Anders et al. 2016).\nNote that the Wald distribution, similarly to the models that we will be covering next, are different from the previous distributions in that they are not characterized by “location” and “scale” parameters (mu \\(\\mu\\) and sigma \\(\\sigma\\)). Instead, the parameters of the Shifted Wald distribution are:\n\nNu \\(\\nu\\): A drift parameter, corresponding to the strength of the evidence accumulation process.\nAlpha \\(\\alpha\\): A threshold parameter, corresponding to the amount of evidence required to make a decision.\nTau \\(\\tau\\): A delay parameter, corresponding to the non-response time (i.e., the minimum time required to process the stimulus and respond). A shift parameter similar to the one in the Shifted LogNormal model.\n\n\nAs we can see, these parameters do not have a direct correspondence with the mean and standard deviation of the distribution. Their interpretation is more complex but, as we will see below, offers a window to a new level of interpretation.\n\n4.7.1 Model Specification\n\n@model function model_Wald(rt; min_rt=minimum(df.RT), condition=nothing)\n\n    # Priors \n    ν_intercept ~ truncated(Normal(1, 3); lower=0)\n    ν_condition ~ Normal(0, 1)\n\n    α_intercept ~ truncated(Normal(0, 1); lower=0)\n    α_condition ~ Normal(0, 0.5)\n\n    τ_intercept ~ truncated(Gamma(1.1, 11); upper=min_rt)\n    τ_condition ~ Normal(0, 0.01)\n\n    for i in 1:length(rt)\n        ν = ν_intercept + ν_condition * condition[i]\n        if ν &lt;= 0  # Avoid negative drift\n            Turing.@addlogprob! -Inf\n            return nothing\n        end\n        α = α_intercept + α_condition * condition[i]\n        if α &lt;= 0  # Avoid negative variance values\n            Turing.@addlogprob! -Inf\n            return nothing\n        end\n        τ = τ_intercept + τ_condition * condition[i]\n        if τ &lt; 0  # Avoid negative tau values\n            Turing.@addlogprob! -Inf\n            return nothing\n        end\n        rt[i] ~ Wald(ν, α, τ)\n    end\nend\n\nfit_Wald = model_Wald(df.RT; condition=df.Accuracy)\nchain_Wald = sample(fit_Wald, NUTS(), 600)\n\n\nhpd(chain_Wald; alpha=0.05)\n\n\nHPD\n   parameters     lower     upper \n       Symbol   Float64   Float64 \n  ν_intercept    5.0986    5.3197\n  ν_condition   -1.3387   -1.0493\n  α_intercept    1.6605    1.7456\n  α_condition    0.2060    0.3437\n  τ_intercept    0.1808    0.1870\n  τ_condition   -0.0371   -0.0231\n\n\n\n\n\n\nCode\npred = predict(model_Wald([(missing) for i in 1:length(df.RT)]; condition=df.Accuracy), chain_Wald)\npred = Array(pred)\n\nfig = plot_distribution(df, \"Predictions made by Shifted Wald Model\")\nfor i in 1:length(chain_Wald)\n    lines!(Makie.KernelDensity.kde(pred[:, i]), color=ifelse(df.Accuracy[i] == 1, \"#388E3C\", \"#D32F2F\"), alpha=0.1)\nend\nfig\n\n\n┌ Warning: Found `resolution` in the theme when creating a `Scene`. The `resolution` keyword for `Scene`s and `Figure`s has been deprecated. Use `Figure(; size = ...` or `Scene(; size = ...)` instead, which better reflects that this is a unitless size and not a pixel resolution. The key could also come from `set_theme!` calls or related theming functions.\n└ @ Makie C:\\Users\\domma\\.julia\\packages\\Makie\\VRavR\\src\\scenes.jl:220\n\n\n\n\n\n\n\n4.7.2 Model Comparison\nAt this stage, given the multiple options avaiable to model RTs, you might be wondering which model is the best. One can compare the models using the Leave-One-Out Cross-Validation (LOO-CV) method, which is a Bayesian method to estimate the out-of-sample predictive accuracy of a model.\n\n\nCode\nusing ParetoSmooth\n\nloo_Gaussian = psis_loo(fit_Gaussian, chain_Gaussian, source=\"mcmc\")\nloo_ScaledGaussian = psis_loo(fit_ScaledlGaussian, chain_ScaledGaussian, source=\"mcmc\")\nloo_LogNormal = psis_loo(fit_LogNormal, chain_LogNormal, source=\"mcmc\")\nloo_ExGaussian = psis_loo(fit_ExGaussian, chain_ExGaussian, source=\"mcmc\")\nloo_Wald = psis_loo(fit_Wald, chain_Wald, source=\"mcmc\")\n\nloo_compare((\n    Gaussian = loo_Gaussian, \n    ScaledGaussian = loo_ScaledGaussian, \n    LogNormal = loo_LogNormal, \n    ExGaussian = loo_ExGaussian, \n    Wald = loo_Wald))\n\n\n\n\n\n┌────────────────┬──────────┬────────┬────────┐\n│                │  cv_elpd │ cv_avg │ weight │\n├────────────────┼──────────┼────────┼────────┤\n│     ExGaussian │     0.00 │   0.00 │   1.00 │\n│      LogNormal │  -322.27 │  -0.03 │   0.00 │\n│           Wald │  -379.85 │  -0.04 │   0.00 │\n│ ScaledGaussian │ -2465.97 │  -0.26 │   0.00 │\n│       Gaussian │ -2974.49 │  -0.31 │   0.00 │\n└────────────────┴──────────┴────────┴────────┘\n\n\nThe loo_compare() function orders models from best to worse based on their ELPD (Expected Log Pointwise Predictive Density) and provides the difference in ELPD between the best model and the other models. As one can see, traditional linear models perform terribly.\n\n\n\n\nAnders, Royce, F Alario, Leendert Van Maanen, et al. 2016. “The Shifted Wald Distribution for Response Time Data Analysis.” Psychological Methods 21 (3): 309.\n\n\nBalota, David A, and Melvin J Yap. 2011. “Moving Beyond the Mean in Studies of Mental Chronometry: The Power of Response Time Distributional Analyses.” Current Directions in Psychological Science 20 (3): 160–66.\n\n\nHeathcote, Andrew. 2004. “Fitting Wald and Ex-Wald Distributions to Response Time Data: An Example Using Functions for the s-PLUS Package.” Behavior Research Methods, Instruments, & Computers 36: 678–94.\n\n\nHeathcote, Andrew, and Jonathon Love. 2012. “Linear Deterministic Accumulator Models of Simple Choice.” Frontiers in Psychology 3: 292.\n\n\nHohle, Raymond H. 1965. “Inferred Components of Reaction Times as Functions of Foreperiod Duration.” Journal of Experimental Psychology 69 (4): 382.\n\n\nKieffaber, Paul D, Emily S Kappenman, Misty Bodkins, Anantha Shekhar, Brian F O’Donnell, and William P Hetrick. 2006. “Switch and Maintenance of Task Set in Schizophrenia.” Schizophrenia Research 84 (2-3): 345–58.\n\n\nLo, Steson, and Sally Andrews. 2015. “To Transform or Not to Transform: Using Generalized Linear Mixed Models to Analyse Reaction Time Data.” Frontiers in Psychology 6: 1171.\n\n\nMatzke, Dora, and Eric-Jan Wagenmakers. 2009. “Psychological Interpretation of the Ex-Gaussian and Shifted Wald Parameters: A Diffusion Model Analysis.” Psychonomic Bulletin & Review 16: 798–817.\n\n\nSchramm, Pele, and Jeffrey N Rouder. 2019. “Are Reaction Time Transformations Really Beneficial?”\n\n\nSchwarz, Wolfgang. 2001. “The Ex-Wald Distribution as a Descriptive Model of Response Times.” Behavior Research Methods, Instruments, & Computers 33: 457–69.\n\n\nThériault, Rémi, Mattan S Ben-Shachar, Indrajeet Patil, Daniel Lüdecke, Brenton M Wiernik, and Dominique Makowski. 2024. “Check Your Outliers! An Introduction to Identifying Statistical Outliers in r with Easystats.” Behavior Research Methods 56 (4): 4162–72.\n\n\nWagenmakers, Eric-Jan, Roger Ratcliff, Pablo Gomez, and Gail McKoon. 2008. “A Diffusion Model Account of Criterion Shifts in the Lexical Decision Task.” Journal of Memory and Language 58 (1): 140–59.",
    "crumbs": [
      "Reaction Times",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Descriptive Models</span>"
    ]
  },
  {
    "objectID": "4b_rt_generative.html",
    "href": "4b_rt_generative.html",
    "title": "5  Generative Models",
    "section": "",
    "text": "5.1 Evidence Accumulation\nThis distribution appears to have been first derived in 1900 to model the time a stock reaches a certain price (a threshold price) for the first time, and used in 1915 by Schrödinger as the time to first passage of a threshold of a Brownian motion (i.e., a random walk).\nMove from statistical models that describe to models that generate RT-like data.",
    "crumbs": [
      "Reaction Times",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Generative Models</span>"
    ]
  },
  {
    "objectID": "4b_rt_generative.html#drift-diffusion-model-ddm",
    "href": "4b_rt_generative.html#drift-diffusion-model-ddm",
    "title": "5  Generative Models",
    "section": "5.2 Drift Diffusion Model (DDM)",
    "text": "5.2 Drift Diffusion Model (DDM)\nUse DDM as a case study to introduce generative models\n\nDrift Diffusion Model (DDM) in R: A Tutorial",
    "crumbs": [
      "Reaction Times",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Generative Models</span>"
    ]
  },
  {
    "objectID": "4b_rt_generative.html#other-models-lba-lnr",
    "href": "4b_rt_generative.html#other-models-lba-lnr",
    "title": "5  Generative Models",
    "section": "5.3 Other Models (LBA, LNR)",
    "text": "5.3 Other Models (LBA, LNR)",
    "crumbs": [
      "Reaction Times",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Generative Models</span>"
    ]
  },
  {
    "objectID": "4b_rt_generative.html#including-random-effects",
    "href": "4b_rt_generative.html#including-random-effects",
    "title": "5  Generative Models",
    "section": "5.4 Including Random Effects",
    "text": "5.4 Including Random Effects\nTODO.",
    "crumbs": [
      "Reaction Times",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Generative Models</span>"
    ]
  },
  {
    "objectID": "4b_rt_generative.html#additional-resources",
    "href": "4b_rt_generative.html#additional-resources",
    "title": "5  Generative Models",
    "section": "5.5 Additional Resources",
    "text": "5.5 Additional Resources\n\nLindelov’s overview of RT models: An absolute must-read.\nDe Boeck & Jeon (2019): A paper providing an overview of RT models.\nhttps://github.com/vasishth/bayescogsci",
    "crumbs": [
      "Reaction Times",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Generative Models</span>"
    ]
  },
  {
    "objectID": "5_individual.html",
    "href": "5_individual.html",
    "title": "6  Individual Parameters",
    "section": "",
    "text": "From mixed models\nAs prior-informed individual Bayesian models",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Individual Parameters</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Anders, Royce, F Alario, Leendert Van Maanen, et al. 2016. “The\nShifted Wald Distribution for Response Time Data Analysis.”\nPsychological Methods 21 (3): 309.\n\n\nBalota, David A, and Melvin J Yap. 2011. “Moving Beyond the Mean\nin Studies of Mental Chronometry: The Power of Response Time\nDistributional Analyses.” Current Directions in Psychological\nScience 20 (3): 160–66.\n\n\nHeathcote, Andrew. 2004. “Fitting Wald and Ex-Wald Distributions\nto Response Time Data: An Example Using Functions for the s-PLUS\nPackage.” Behavior Research Methods, Instruments, &\nComputers 36: 678–94.\n\n\nHeathcote, Andrew, and Jonathon Love. 2012. “Linear Deterministic\nAccumulator Models of Simple Choice.” Frontiers in\nPsychology 3: 292.\n\n\nHohle, Raymond H. 1965. “Inferred Components of Reaction Times as\nFunctions of Foreperiod Duration.” Journal of Experimental\nPsychology 69 (4): 382.\n\n\nKieffaber, Paul D, Emily S Kappenman, Misty Bodkins, Anantha Shekhar,\nBrian F O’Donnell, and William P Hetrick. 2006. “Switch and\nMaintenance of Task Set in Schizophrenia.” Schizophrenia\nResearch 84 (2-3): 345–58.\n\n\nLo, Steson, and Sally Andrews. 2015. “To Transform or Not to\nTransform: Using Generalized Linear Mixed Models to Analyse Reaction\nTime Data.” Frontiers in Psychology 6: 1171.\n\n\nMatzke, Dora, and Eric-Jan Wagenmakers. 2009. “Psychological\nInterpretation of the Ex-Gaussian and Shifted Wald Parameters: A\nDiffusion Model Analysis.” Psychonomic Bulletin &\nReview 16: 798–817.\n\n\nSchramm, Pele, and Jeffrey N Rouder. 2019. “Are Reaction Time\nTransformations Really Beneficial?”\n\n\nSchwarz, Wolfgang. 2001. “The Ex-Wald Distribution as a\nDescriptive Model of Response Times.” Behavior Research\nMethods, Instruments, & Computers 33: 457–69.\n\n\nThériault, Rémi, Mattan S Ben-Shachar, Indrajeet Patil, Daniel Lüdecke,\nBrenton M Wiernik, and Dominique Makowski. 2024. “Check Your\nOutliers! An Introduction to Identifying Statistical Outliers in r with\nEasystats.” Behavior Research Methods 56 (4): 4162–72.\n\n\nWagenmakers, Eric-Jan, Roger Ratcliff, Pablo Gomez, and Gail McKoon.\n2008. “A Diffusion Model Account of Criterion Shifts in the\nLexical Decision Task.” Journal of Memory and Language\n58 (1): 140–59.",
    "crumbs": [
      "References"
    ]
  }
]