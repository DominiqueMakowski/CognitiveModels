{
  "hash": "e41c66d6a34e1f1dc493d63e4a8c769b",
  "result": {
    "engine": "jupyter",
    "markdown": "# Reaction Times\n\n![](https://img.shields.io/badge/status-WIP-orange)\n\n## The Data\n\nData from @wagenmakers2008diffusion - Experiment 1.\nWe excluded all trials with uninterpretable response time [see @theriault2024check] such as too fast response (<180 ms) and too slow response (>2 sec).\n\n::: {#55936b09 .cell execution_count=1}\n``` {.julia .cell-code code-fold=\"false\"}\nusing Downloads, CSV, DataFrames\nusing Turing, Distributions, SequentialSamplingModels\nusing CairoMakie\n\ndf = CSV.read(Downloads.download(\"https://raw.githubusercontent.com/DominiqueMakowski/CognitiveModels/main/data/wagenmakers2008.csv\"), DataFrame)\nfirst(df, 10)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div><div style = \"float: left;\"><span>10×5 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">Participant</th><th style = \"text-align: left;\">Condition</th><th style = \"text-align: left;\">RT</th><th style = \"text-align: left;\">Error</th><th style = \"text-align: left;\">Frequency</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"String15\" style = \"text-align: left;\">String15</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Bool\" style = \"text-align: left;\">Bool</th><th title = \"String15\" style = \"text-align: left;\">String15</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">Speed</td><td style = \"text-align: right;\">0.7</td><td style = \"text-align: right;\">false</td><td style = \"text-align: left;\">Low</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">Speed</td><td style = \"text-align: right;\">0.392</td><td style = \"text-align: right;\">true</td><td style = \"text-align: left;\">Very Low</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">Speed</td><td style = \"text-align: right;\">0.46</td><td style = \"text-align: right;\">false</td><td style = \"text-align: left;\">Very Low</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">Speed</td><td style = \"text-align: right;\">0.455</td><td style = \"text-align: right;\">false</td><td style = \"text-align: left;\">Very Low</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">Speed</td><td style = \"text-align: right;\">0.505</td><td style = \"text-align: right;\">true</td><td style = \"text-align: left;\">Low</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">Speed</td><td style = \"text-align: right;\">0.773</td><td style = \"text-align: right;\">false</td><td style = \"text-align: left;\">High</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">Speed</td><td style = \"text-align: right;\">0.39</td><td style = \"text-align: right;\">false</td><td style = \"text-align: left;\">High</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">8</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">Speed</td><td style = \"text-align: right;\">0.587</td><td style = \"text-align: right;\">true</td><td style = \"text-align: left;\">Low</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">9</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">Speed</td><td style = \"text-align: right;\">0.603</td><td style = \"text-align: right;\">false</td><td style = \"text-align: left;\">Low</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">10</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">Speed</td><td style = \"text-align: right;\">0.435</td><td style = \"text-align: right;\">false</td><td style = \"text-align: left;\">High</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nWe create a new column, `Accuracy`, which is the \"binarization\" of the `Condition` column, and is equal to 1 when the condition is `\"Accuracy\"` and 0 when it is `\"Speed\"`.\n\n::: {#f5c60165 .cell execution_count=2}\n``` {.julia .cell-code}\ndf = df[df.Error .== 0, :]\ndf.Accuracy = df.Condition .== \"Accuracy\"\n```\n:::\n\n\n::: {.callout-tip title=\"Code Tip\"}\nNote the usage of *vectorization* `.==` as we want to compare each element of the `Condition` vector to the target `\"Accuracy\"`.\n:::\n\n::: {#d1f8bb12 .cell execution_count=3}\n``` {.julia .cell-code}\nfunction plot_distribution(df, title=\"Empirical Distribution of Data from Wagenmakers et al. (2018)\")\n    fig = Figure()\n    ax = Axis(fig[1, 1], title=title,\n        xlabel=\"RT (s)\",\n        ylabel=\"Distribution\",\n        yticksvisible=false,\n        xticksvisible=false,\n        yticklabelsvisible=false)\n    CairoMakie.density!(df[df.Condition .== \"Speed\", :RT], color=(\"#EF5350\", 0.7), label = \"Speed\")\n    CairoMakie.density!(df[df.Condition .== \"Accuracy\", :RT], color=(\"#66BB6A\", 0.7), label = \"Accuracy\")\n    CairoMakie.axislegend(\"Condition\"; position=:rt)\n    CairoMakie.ylims!(ax, (0, nothing))\n    return fig\nend\n\nplot_distribution(df, \"Empirical Distribution of Data from Wagenmakers et al. (2018)\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n┌ Warning: Found `resolution` in the theme when creating a `Scene`. The `resolution` keyword for `Scene`s and `Figure`s has been deprecated. Use `Figure(; size = ...` or `Scene(; size = ...)` instead, which better reflects that this is a unitless size and not a pixel resolution. The key could also come from `set_theme!` calls or related theming functions.\n└ @ Makie C:\\Users\\domma\\.julia\\packages\\Makie\\VRavR\\src\\scenes.jl:220\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n![](4_rt_files/figure-html/cell-4-output-2.svg){}\n:::\n:::\n\n\n## Descriptive Models \n\n### Bayesian Linear Models\n\n#### The Model\n\n::: {#9402fdf5 .cell execution_count=4}\n``` {.julia .cell-code code-fold=\"false\"}\n@model function model_linear(rt; condition=nothing)\n\n    # Set priors on variance, intercept and effect of ISI\n    σ ~ truncated(Normal(0, 1); lower=0)\n    intercept ~ truncated(Normal(0, 1); lower=0)\n    slope_accuracy ~ Normal(0, 0.5)\n\n    for i in 1:length(rt)\n        μ = intercept + slope_accuracy * condition[i]\n        rt[i] ~ Normal(μ, σ)\n    end\nend\n\n\nmodel = model_linear(df.RT; condition=df.Accuracy)\nchain_linear = sample(model, NUTS(), 400)\n\n# Summary (95% CI)\nquantile(chain_linear; q=[0.025, 0.975])\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n┌ Info: Found initial step size\n└   ϵ = 0.0015625\n\rSampling:   0%|█                                        |  ETA: 0:00:32\rSampling: 100%|█████████████████████████████████████████| Time: 0:00:01\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>Quantiles\n <span class=\"ansi-bold\">     parameters </span> <span class=\"ansi-bold\">    2.5% </span> <span class=\"ansi-bold\">   97.5% </span>\n <span class=\"ansi-bright-black-fg\">         Symbol </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span>\n               σ    0.1655    0.1697\n       intercept    0.5070    0.5158\n  slope_accuracy    0.1320    0.1445\n</pre>\n```\n:::\n\n:::\n:::\n\n\nThe effect of Condition is significant, people are on average slower (higher RT) when condition is `\"Accuracy\"`.\nBut is our model good?\n\n#### Posterior Predictive Check\n\n::: {#a375c6d2 .cell execution_count=5}\n``` {.julia .cell-code}\npred = predict(model_linear([(missing) for i in 1:length(df.RT)], condition=df.Accuracy), chain_linear)\npred = Array(pred)\n```\n:::\n\n\n::: {#39b1d313 .cell fig-height='7' fig-width='10' execution_count=6}\n``` {.julia .cell-code}\nfig = plot_distribution(df, \"Predictions made by Linear Model\")\nfor i in 1:length(chain_linear)\n    lines!(Makie.KernelDensity.kde(pred[:, i]), color=ifelse(df.Accuracy[i] == 1, \"#388E3C\", \"#D32F2F\"), alpha=0.1)\nend\nfig\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n┌ Warning: Found `resolution` in the theme when creating a `Scene`. The `resolution` keyword for `Scene`s and `Figure`s has been deprecated. Use `Figure(; size = ...` or `Scene(; size = ...)` instead, which better reflects that this is a unitless size and not a pixel resolution. The key could also come from `set_theme!` calls or related theming functions.\n└ @ Makie C:\\Users\\domma\\.julia\\packages\\Makie\\VRavR\\src\\scenes.jl:220\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=7}\n![](4_rt_files/figure-html/cell-7-output-2.svg){}\n:::\n:::\n\n\n#### The Problem with Linear Models\n\nReaction time (RTs) have been traditionally modeled using traditional linear models and their derived statistical tests such as *t*-test and ANOVAs. Importantly, linear models - by definition - will try to predict the *mean* of the outcome variable by estimating the \"best fitting\" *Normal* distribution. In the context of reaction times (RTs), this is not ideal, as RTs typically exhibit a non-normal distribution, skewed towards the left with a long tail towards the right. This means that the parameters of a Normal distribution (mean $\\mu$ and standard deviation $\\sigma$) are not good descriptors of the data.\n\n![](media/rt_normal.gif)\n\n> Linear models try to find the best fitting Normal distribution for the data. However, for reaction times, even the best fitting Normal distribution (in red) does not capture well the actual data (in grey).\n\nA popular mitigation method to account for the non-normality of RTs is to transform the data, using for instance the popular *log-transform*. \nHowever, this practice should be avoided as it leads to various issues, including loss of power and distorted results interpretation [@lo2015transform; @schramm2019reaction].\nInstead, rather than applying arbitrary data transformation, it would be better to swap the Normal distribution used by the model for a more appropriate one that can better capture the characteristics of a RT distribution.\n\n\n### Shifted LogNormal Model\n\nOne of the obvious candidate alternative to the log-transformation would be to use a model with a Log-transformed Normal distribution.\n\nNew parameter, $\\tau$ (Tau for delay), which corresponds to the \"starting time\". We need to set a prior for this parameter, which is usually truncated between 0 and the minimum RT of the data (the logic being that the minimum delay for response must be lower than the faster response actually observed).\n\n::: {#f2af9eab .cell execution_count=7}\n``` {.julia .cell-code}\nxaxis = range(0, 1, 1000)\nlines(xaxis, pdf.(Gamma(1.1, 11), xaxis))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n┌ Warning: Found `resolution` in the theme when creating a `Scene`. The `resolution` keyword for `Scene`s and `Figure`s has been deprecated. Use `Figure(; size = ...` or `Scene(; size = ...)` instead, which better reflects that this is a unitless size and not a pixel resolution. The key could also come from `set_theme!` calls or related theming functions.\n└ @ Makie C:\\Users\\domma\\.julia\\packages\\Makie\\VRavR\\src\\scenes.jl:220\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=8}\n![](4_rt_files/figure-html/cell-8-output-2.svg){}\n:::\n:::\n\n\n#### Model\n\n::: {#d720ce88 .cell execution_count=8}\n``` {.julia .cell-code code-fold=\"false\"}\n@model function model_lognormal(rt; min_rt=minimum(df.RT), condition=nothing)\n\n    # Priors \n    σ ~ truncated(Normal(0, 0.5); lower=0)\n    τ ~ truncated(Gamma(1.1, 11); upper=min_rt)\n\n    intercept ~ Normal(0, 2)\n    slope_accuracy ~ Normal(0, 0.5)\n\n    for i in 1:length(rt)\n        μ = intercept + slope_accuracy * condition[i]\n        rt[i] ~ ShiftedLogNormal(μ, σ, τ)\n    end\nend\n\nmodel = model_lognormal(df.RT; condition=df.Accuracy)\nchain_lognormal = sample(model, NUTS(), 400)\n\n# Summary (95% CI)\nquantile(chain_lognormal; q=[0.025, 0.975])\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n┌ Info: Found initial step size\n└   ϵ = 0.003125\n\rSampling:  10%|█████                                    |  ETA: 0:00:04\rSampling:  13%|██████                                   |  ETA: 0:00:04\rSampling:  16%|███████                                  |  ETA: 0:00:04\rSampling:  18%|████████                                 |  ETA: 0:00:04\rSampling:  20%|█████████                                |  ETA: 0:00:04\rSampling:  22%|██████████                               |  ETA: 0:00:04\rSampling:  26%|███████████                              |  ETA: 0:00:04\rSampling:  28%|████████████                             |  ETA: 0:00:04\rSampling:  33%|██████████████                           |  ETA: 0:00:03\rSampling:  38%|████████████████                         |  ETA: 0:00:03\rSampling:  44%|██████████████████                       |  ETA: 0:00:02\rSampling:  49%|█████████████████████                    |  ETA: 0:00:02\rSampling:  54%|██████████████████████                   |  ETA: 0:00:02\rSampling:  58%|████████████████████████                 |  ETA: 0:00:02\rSampling:  64%|███████████████████████████              |  ETA: 0:00:01\rSampling:  70%|█████████████████████████████            |  ETA: 0:00:01\rSampling:  76%|███████████████████████████████          |  ETA: 0:00:01\rSampling:  80%|██████████████████████████████████       |  ETA: 0:00:01\rSampling:  85%|███████████████████████████████████      |  ETA: 0:00:00\rSampling:  89%|█████████████████████████████████████    |  ETA: 0:00:00\rSampling:  94%|███████████████████████████████████████  |  ETA: 0:00:00\rSampling:  99%|█████████████████████████████████████████|  ETA: 0:00:00\rSampling: 100%|█████████████████████████████████████████| Time: 0:00:03\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=9}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre>Quantiles\n <span class=\"ansi-bold\">     parameters </span> <span class=\"ansi-bold\">    2.5% </span> <span class=\"ansi-bold\">   97.5% </span>\n <span class=\"ansi-bright-black-fg\">         Symbol </span> <span class=\"ansi-bright-black-fg\"> Float64 </span> <span class=\"ansi-bright-black-fg\"> Float64 </span>\n               σ    0.3340    0.3445\n               τ    0.1732    0.1795\n       intercept   -1.1619   -1.1329\n  slope_accuracy    0.3170    0.3436\n</pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#a9ef74e6 .cell execution_count=9}\n``` {.julia .cell-code}\n# pred = predict(model_lognormal([(missing) for i in 1:length(df.RT)]; condition=df.Accuracy), chain_lognormal)\n# pred = Array(pred)\n```\n:::\n\n\n::: {#f6aed63e .cell fig-height='7' fig-width='10' execution_count=10}\n``` {.julia .cell-code}\n# fig = plot_distribution(df, \"Predictions made by Shifted LogNormal Model\")\n# for i in 1:length(chain_lognormal)\n#     lines!(Makie.KernelDensity.kde(pred[:, i]), color=ifelse(df.Accuracy[i] == 1, \"#388E3C\", \"#D32F2F\"), alpha=0.1)\n# end\n# fig\n```\n:::\n\n\n#### More Conditional Parameters\n\n\n\n### ExGaussian Model\n\n\n- [**Ex-Gaussian models in R: A Tutorial**](https://dominiquemakowski.github.io/easyRT/articles/exgaussian.html)\n\n### Wald Model\n\nMoe from statistical models that *describe* to models that *generate* RT-like data.\n\n## Generative Models (DDM)\n\nUse DDM as a case study to introduce generative models\n\n- [**Drift Diffusion Model (DDM) in R: A Tutorial**](https://dominiquemakowski.github.io/easyRT/articles/ddm.html)\n\n## Other Models (LBA, LNR)\n\n\n## Additional Resources\n\n- [**Lindelov's overview of RT models**](https://lindeloev.github.io/shiny-rt/): An absolute must-read.\n- [**De Boeck & Jeon (2019)**](https://www.frontiersin.org/articles/10.3389/fpsyg.2019.00102/full): A paper providing an overview of RT models.\n- [https://github.com/vasishth/bayescogsci](https://github.com/vasishth/bayescogsci)\n\n",
    "supporting": [
      "4_rt_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}